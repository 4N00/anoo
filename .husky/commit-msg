#!/bin/sh

# Validate commit message format
npx --no -- commitlint --edit ${1}

# Check commit message length
if [ $(cat $1 | wc -c) -gt 200 ]; then
  echo "Commit message is too long (max 100 characters)"
  exit 1
fi

# Check for conventional commit format
commit_msg=$(cat $1)
if ! echo "$commit_msg" | grep -qE "^(feat|fix|docs|style|refactor|test|chore|build|ci|perf|revert)(\([a-z-]+\))?: .+$"; then
  echo "Invalid commit message format. Please use conventional commits:"
  echo "type(scope): description"
  echo ""
  echo "Types: feat, fix, docs, style, refactor, test, chore, build, ci, perf, revert"
  echo "Example: feat(auth): add login functionality"
  exit 1
fi

# Check for imperative mood
first_word=$(echo "$commit_msg" | sed -n 's/^[^:]*: \([^ ]*\).*/\1/p')
if echo "$first_word" | grep -qE "ed$|ing$"; then
  echo "Please use imperative mood in commit messages (add instead of added/adding)"
  exit 1
fi

# Check for period at the end
if echo "$commit_msg" | grep -qE "\.$"; then
  echo "Commit message should not end with a period"
  exit 1
fi

# Debugging output
echo "Validating commit message: $commit_msg"