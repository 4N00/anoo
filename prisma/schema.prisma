// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and authorization
model User {
  id        String    @id @default(cuid())
  email     String    @unique
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  projects  Project[] // Relation to projects created by this user

  @@map("users")
}

// Project model for portfolio items
model Project {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  imageUrl    String
  githubUrl   String?
  liveUrl     String?
  tags        String[] // Array of technology tags
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  version     Int      @default(1) // For optimistic concurrency control
  authorId    String   // Foreign key to User
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([featured])
  @@map("projects")
}

// Enum for user roles
enum Role {
  USER
  ADMIN
}

// Audit log for tracking changes
model AuditLog {
  id        String      @id @default(cuid())
  action    AuditAction
  entityId  String      // ID of the affected entity
  entityType String     // Type of the affected entity (e.g., "Project", "User")
  data      Json?       // Additional data about the change
  timestamp DateTime    @default(now())

  @@index([entityId, entityType])
  @@index([timestamp])
  @@map("audit_logs")
}

// Enum for audit actions
enum AuditAction {
  CREATE
  UPDATE
  DELETE
}

// Session model for tracking active sessions
model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  lastActivity DateTime @default(now())
  userAgent    String?
  ipAddress    String?

  @@index([userId])
  @@index([expires])
  @@map("sessions")
}

// Rate limiting model
model RateLimit {
  id        String   @id
  hits      Int      @default(0)
  timestamp DateTime @default(now())

  @@index([timestamp])
  @@map("rate_limits")
}

// Cache model for storing API responses
model Cache {
  key       String   @id
  value     String   @db.Text
  expiresAt DateTime

  @@index([expiresAt])
  @@map("cache")
}